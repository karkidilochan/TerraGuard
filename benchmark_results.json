[
    {
        "prompt_id": 1,
        "prompt": "Configure a query log that can create a log stream and put log events using Route 53 resources. Name the zone \"primary\", the cloudwatch log group \"aws_route53_example_com\", and the cloudwatch log resource policy \"route53-query-logging-policy\"",
        "generated_code": "```hcl\nprovider \"aws\" {\n  region = \"us-west-2\"\n}\n\ndata \"aws_region\" \"current\" {}\ndata \"aws_caller_identity\" \"current\" {}\n\nresource \"aws_s3_bucket\" \"logs\" {\n  bucket = \"aws-route53-query-logs\"\n}\n\nresource \"aws_s3_bucket_public_access_block\" \"logs\" {\n  bucket = aws_s3_bucket.logs.id\n  block_public_acls       = true\n  block_public_policy     = true\n  ignore_public_acls      = true\n  restrict_public_buckets = true\n}\n\nresource \"aws_s3_bucket_versioning\" \"logs\" {\n  bucket = aws_s3_bucket.logs.id\n  versioning_configuration {\n    status = \"Enabled\"\n  }\n}\n\nresource \"aws_s3_bucket_server_side_encryption_configuration\" \"logs\" {\n  bucket = aws_s3_bucket.logs.id\n  rule {\n    apply_server_side_encryption_by_default {\n      sse_algorithm = \"AES256\"\n    }\n  }\n}\n\nresource \"aws_s3_bucket_policy\" \"logs\" {\n  bucket = aws_s3_bucket.logs.id\n  policy = jsonencode({\n    Version = \"2012-10-17\"\n    Statement = [\n      {\n        Effect = \"Allow\"\n        Principal = {\n          Service = \"logs.us-west-2.amazonaws.com\"\n        }\n        Action = \"s3:PutObject\"\n        Resource = \"arn:aws:s3:::${aws_s3_bucket.logs.id}/*\"\n      }\n    ]\n  })\n}\n\nresource \"aws_kms_key\" \"logs\" {\n  description             = \"KMS key for Route 53 query logs\"\n  enable_key_rotation     = true\n  deletion_window_in_days = 30\n  policy = jsonencode({\n    Version = \"2012-10-17\"\n    Statement = [\n      {\n        Effect = \"Allow\"\n        Principal = {\n          AWS = \"arn:aws:iam::${data.aws_caller_identity.current.account_id}:root\"\n        }\n        Action = \"kms:*\"\n        Resource = \"*\"\n      }\n    ]\n  })\n}\n\nresource \"aws_cloudwatch_log_group\" \"route53_logs\" {\n  name              = \"aws_route53_example_com\"\n  retention_in_days = 14\n  kms_key_id        = aws_kms_key.logs.arn\n}\n\nresource \"aws_cloudwatch_log_stream\" \"route53_logs\" {\n  name           = \"route53-query-logs\"\n  log_group_name = aws_cloudwatch_log_group.route53_logs.name\n}\n\nresource \"aws_iam_role\" \"route53_query_logging\" {\n  name = \"route53-query-logging-role\"\n  assume_role_policy = jsonencode({\n    Version = \"2012-10-17\"\n    Statement = [\n      {\n        Effect = \"Allow\"\n        Principal = {\n          Service = \"route53.amazonaws.com\"\n        }\n        Action = \"sts:AssumeRole\"\n      }\n    ]\n  })\n}\n\nresource \"aws_iam_policy\" \"route53_query_logging\" {\n  name   = \"route53-query-logging-policy\"\n  policy = jsonencode({\n    Version = \"2012-10-17\"\n    Statement = [\n      {\n        Effect = \"Allow\"\n        Action = [\n          \"logs:CreateLogStream\",\n          \"logs:PutLogEvents\",\n          \"logs:DescribeLogStreams\",\n          \"logs:DescribeLogGroups\"\n        ]\n        Resource = [\n          \"arn:aws:logs:${data.aws_region.current.name}:${data.aws_caller_identity.current.account_id}:log-group:${aws_cloudwatch_log_group.route53_logs.name}:log-stream:*\"\n        ]\n      }\n    ]\n  })\n}\n\nresource \"aws_iam_role_policy_attachment\" \"route53_query_logging\" {\n  role       = aws_iam_role.route53_query_logging.name\n  policy_arn = aws_iam_policy.route53_query_logging.arn\n}\n\nresource \"aws_route53_query_log\" \"example\" {\n  cloudwatch_log_group_arn = aws_cloudwatch_log_group.route53_logs.arn\n  zone_id                  = aws_route53_zone.primary.id\n}\n\nresource \"aws_route53_zone\" \"primary\" {\n  name = \"example.com\"\n}\n\nresource \"aws_cloudwatch_log_resource_policy\" \"route53_query_logging_policy\" {\n  policy_document = jsonencode({\n    Version = \"2012-10-17\"\n    Statement = [\n      {\n        Effect = \"Allow\"\n        Principal = {\n          Service = \"route53.amazonaws.com\"\n        }\n        Action = [\n          \"logs:PutLogEvents\"\n        ]\n        Resource = \"arn:aws:logs:${data.aws_region.current.name}:${data.aws_caller_identity.current.account_id}:log-group:${aws_cloudwatch_log_group.route53_logs.name}:log-stream:*\"\n      }\n    ]\n  })\n  policy_name = \"route53-query-logging-policy\"\n}\n```",
        "validation_summary": {
            "status": "failed",
            "syntax_valid": false,
            "cis_compliant": false,
            "referenced_cis_controls": [],
            "issues": [
                "Terraform syntax validation failed",
                "CIS compliance validation failed",
                "Terraform not installed. Skipping syntax validation."
            ],
            "checkov_output_file": ""
        },
        "compliance_report": "",
        "timestamp": "2025-04-14T19:09:57.766265"
    }
]