[
  {
    "query": "How do I create an S3 bucket with versioning and encryption that complies with CIS benchmarks?",
    "terraform_code": "```hcl\nprovider \"aws\" {\n  region = \"us-west-2\"\n}\n\nvariable \"bucket_name\" {\n  default = \"my-secure-s3-bucket\"\n}\n\nresource \"aws_kms_key\" \"s3_key\" {\n  description             = \"KMS key for S3 bucket encryption\"\n  deletion_window_in_days = 30\n  enable_key_rotation     = true\n\n  policy = jsonencode({\n    Version = \"2012-10-17\"\n    Statement = [\n      {\n        Effect = \"Allow\"\n        Principal = {\n          AWS = \"*\"\n        }\n        Action = \"kms:*\"\n        Resource = \"*\"\n        Condition = {\n          Bool = {\n            \"kms:GrantIsForAWSResource\" = \"true\"\n          }\n        }\n      }\n    ]\n  })\n}\n\nresource \"aws_s3_bucket\" \"secure_bucket\" {\n  bucket = var.bucket_name\n\n  versioning {\n    enabled = true\n  }\n\n  server_side_encryption_configuration {\n    rule {\n      apply_server_side_encryption_by_default {\n        sse_algorithm     = \"aws:kms\"\n        kms_master_key_id = aws_kms_key.s3_key.arn\n      }\n    }\n  }\n\n  tags = {\n    Name        = var.bucket_name\n    Environment = \"Production\"\n  }\n}\n\nresource \"aws_s3_bucket_public_access_block\" \"example\" {\n  bucket = aws_s3_bucket.secure_bucket.id\n\n  block_public_acls       = true\n  block_public_policy     = true\n  ignore_public_acls      = true\n  restrict_public_buckets = true\n}\n\nresource \"aws_s3_bucket_policy\" \"secure_bucket_policy\" {\n  bucket = aws_s3_bucket.secure_bucket.id\n\n  policy = jsonencode({\n    Version = \"2012-10-17\"\n    Statement = [\n      {\n        Effect = \"Deny\"\n        Principal = \"*\"\n        Action = \"s3:*\"\n        Resource = [\n          aws_s3_bucket.secure_bucket.arn,\n          \"${aws_s3_bucket.secure_bucket.arn}/*\"\n        ]\n        Condition = {\n          Bool = {\n            \"aws:SecureTransport\" = \"false\"\n          }\n        }\n      }\n    ]\n  })\n}\n\nresource \"aws_cloudtrail\" \"example\" {\n  name                          = \"example-trail\"\n  s3_bucket_name                = aws_s3_bucket.secure_bucket.id\n  s3_key_prefix                 = \"prefix\"\n  include_global_service_events = true\n\n  event_selector {\n    read_write_type           = \"All\"\n    include_management_events = true\n\n    data_resource {\n      type   = \"AWS::S3::Object\"\n      values = [\"arn:aws:s3:::\"]\n    }\n  }\n}\n\nresource \"aws_cloudwatch_log_group\" \"example\" {\n  name              = \"/aws/cloudtrail/${aws_cloudtrail.example.name}\"\n  retention_in_days = 365\n}\n\nresource \"aws_flow_log\" \"example\" {\n  iam_role_arn    = aws_iam_role.vpc_flow_logs_role.arn\n  log_destination = aws_cloudwatch_log_group.example.arn\n  traffic_type    = \"ALL\"\n  vpc_id          = aws_vpc.main.id\n}\n\nresource \"aws_iam_role\" \"vpc_flow_logs_role\" {\n  name = \"vpc-flow-logs-role\"\n\n  assume_role_policy = jsonencode({\n    Version = \"2012-10-17\"\n    Statement = [\n      {\n        Effect = \"Allow\"\n        Principal = {\n          Service = \"vpc-flow-logs.amazonaws.com\"\n        }\n        Action = \"sts:AssumeRole\"\n      }\n    ]\n  })\n}\n\nresource \"aws_iam_role_policy\" \"vpc_flow_logs_policy\" {\n  name = \"vpc-flow-logs-policy\"\n  role = aws_iam_role.vpc_flow_logs_role.id\n\n  policy = jsonencode({\n    Version = \"2012-10-17\"\n    Statement = [\n      {\n        Effect = \"Allow\"\n        Action = [\n          \"logs:CreateLogGroup\",\n          \"logs:CreateLogStream\",\n          \"logs:PutLogEvents\",\n          \"logs:DescribeLogGroups\",\n          \"logs:DescribeLogStreams\"\n        ]\n        Resource = \"*\"\n      }\n    ]\n  })\n}\n\nresource \"aws_vpc\" \"main\" {\n  cidr_block = \"10.0.0.0/16\"\n\n  tags = {\n    Name = \"main-vpc\"\n  }\n}\n\nresource \"aws_subnet\" \"private\" {\n  count = 2\n  vpc_id = aws_vpc.main.id\n  cidr_block = \"10.0.${count.index}.0/24\"\n\n  tags = {\n    Name = \"private-subnet-${count.index}\"\n  }\n}\n\nresource \"aws_security_group\" \"example\" {\n  name        = \"example-sg\"\n  description = \"Allow minimal required access\"\n  vpc_id      = aws_vpc.main.id\n\n  ingress {\n    from_port   = 22\n    to_port     = 22\n    protocol    = \"tcp\"\n    cidr_blocks = [\"10.0.0.0/16\"]\n  }\n\n  egress {\n    from_port   = 0\n    to_port     = 0\n    protocol    = \"-1\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n\n  tags = {\n    Name = \"example-sg\"\n  }\n}\n```",
    "referenced_cis_controls": [],
    "validation_summary": {
      "status": "failed",
      "syntax_valid": true,
      "cis_compliant": false,
      "referenced_cis_controls": [],
      "issues": [
        "CIS compliance validation failed",
        "Formatting error: Code is not properly formatted",
        "CIS compliance check error: [Errno 13] Permission denied: 'checkov_output\\\\validation_20250325_014357_5008.json'"
      ]
    },
    "compliance_report": null,
    "checkov_output_file": null,
    "errors": [
      "Formatting error: Code is not properly formatted",
      "CIS compliance check error: [Errno 13] Permission denied: 'checkov_output\\\\validation_20250325_014357_5008.json'"
    ]
  },
  {
    "query": "Create IAM roles with least privilege access following CIS security controls",
    "terraform_code": "```hcl\nprovider \"aws\" {\n  region = \"us-west-2\"\n}\n\nresource \"aws_iam_role\" \"ec2_role\" {\n  name = \"ec2-least-privilege-role\"\n  assume_role_policy = jsonencode({\n    Version = \"2012-10-17\",\n    Statement = [\n      {\n        Effect = \"Allow\",\n        Principal = {\n          Service = \"ec2.amazonaws.com\"\n        },\n        Action = \"sts:AssumeRole\"\n      }\n    ]\n  })\n}\n\nresource \"aws_iam_policy\" \"ec2_policy\" {\n  name        = \"ec2-least-privilege-policy\"\n  description = \"Least privilege policy for EC2 instances\"\n  policy      = jsonencode({\n    Version = \"2012-10-17\",\n    Statement = [\n      {\n        Effect = \"Allow\",\n        Action = [\n          \"s3:ListBucket\",\n        ],\n        Resource = \"arn:aws:s3:::example-bucket\"\n      },\n      {\n        Effect = \"Allow\",\n        Action = [\n          \"s3:GetObject\",\n          \"s3:PutObject\",\n        ],\n        Resource = \"arn:aws:s3:::example-bucket/*\"\n      }\n    ]\n  })\n}\n\nresource \"aws_iam_role_policy_attachment\" \"ec2_policy_attach\" {\n  role       = aws_iam_role.ec2_role.name\n  policy_arn = aws_iam_policy.ec2_policy.arn\n}\n\nresource \"aws_iam_role\" \"lambda_role\" {\n  name = \"lambda-least-privilege-role\"\n  assume_role_policy = jsonencode({\n    Version = \"2012-10-17\",\n    Statement = [\n      {\n        Effect = \"Allow\",\n        Principal = {\n          Service = \"lambda.amazonaws.com\"\n        },\n        Action = \"sts:AssumeRole\"\n      }\n    ]\n  })\n}\n\nresource \"aws_iam_policy\" \"lambda_policy\" {\n  name        = \"lambda-least-privilege-policy\"\n  description = \"Least privilege policy for Lambda functions\"\n  policy      = jsonencode({\n    Version = \"2012-10-17\",\n    Statement = [\n      {\n        Effect = \"Allow\",\n        Action = [\n          \"logs:CreateLogGroup\",\n          \"logs:CreateLogStream\",\n          \"logs:PutLogEvents\"\n        ],\n        Resource = \"arn:aws:logs:*:*:*\"\n      },\n      {\n        Effect = \"Allow\",\n        Action = [\n          \"s3:GetObject\",\n        ],\n        Resource = \"arn:aws:s3:::example-bucket/*\"\n      }\n    ]\n  })\n}\n\nresource \"aws_iam_role_policy_attachment\" \"lambda_policy_attach\" {\n  role       = aws_iam_role.lambda_role.name\n  policy_arn = aws_iam_policy.lambda_policy.arn\n}\n\nresource \"aws_cloudtrail\" \"example\" {\n  name                          = \"example-trail\"\n  s3_bucket_name                = aws_s3_bucket.cloudtrail_bucket.bucket\n  s3_key_prefix                 = \"cloudtrail\"\n  include_global_service_events = true\n  is_multi_region_trail        = true\n  enable_log_file_validation    = true\n  enable_logging                = true\n\n  event_selector {\n    read_write_type           = \"All\"\n    include_management_events = true\n\n    data_resource {\n      type   = \"AWS::S3::Object\"\n      values = [\"arn:aws:s3:::\"]\n    }\n  }\n}\n\nresource \"aws_s3_bucket\" \"cloudtrail_bucket\" {\n  bucket = \"example-cloudtrail-bucket\"\n\n  versioning {\n    enabled = true\n  }\n\n  server_side_encryption_configuration {\n    rule {\n      apply_server_side_encryption_by_default {\n        sse_algorithm = \"AES256\"\n      }\n    }\n  }\n\n  block_public_acls   = true\n  block_public_policy = true\n  ignore_public_acls  = true\n  restrict_public_buckets = true\n}\n\nresource \"aws_s3_bucket_policy\" \"cloudtrail_bucket_policy\" {\n  bucket = aws_s3_bucket.cloudtrail_bucket.bucket\n\n  policy = jsonencode({\n    Version = \"2012-10-17\",\n    Statement = [\n      {\n        Effect = \"Allow\",\n        Principal = {\n          Service = \"cloudtrail.amazonaws.com\"\n        },\n        Action = \"s3:GetBucketAcl\",\n        Resource = \"arn:aws:s3:::example-cloudtrail-bucket\"\n      },\n      {\n        Effect = \"Allow\",\n        Principal = {\n          Service = \"cloudtrail.amazonaws.com\"\n        },\n        Action = \"s3:PutObject\",\n        Resource = \"arn:aws:s3:::example-cloudtrail-bucket/AWSLogs/*\",\n        Condition = {\n          StringEquals = {\n            \"s3:x-amz-acl\" = \"bucket-owner-full-control\"\n          }\n        }\n      }\n    ]\n  })\n}\n```",
    "referenced_cis_controls": [],
    "validation_summary": {
      "status": "failed",
      "syntax_valid": false,
      "cis_compliant": false,
      "referenced_cis_controls": [],
      "issues": [
        "Terraform syntax validation failed",
        "CIS compliance validation failed",
        "Formatting error: Code is not properly formatted",
        "Validation error: \u001b[31m\u00e2\u2022\u00b7\u001b[0m\u001b[0m\n\u001b[31m\u00e2\u201d\u201a\u001b[0m \u001b[0m\u001b[1m\u001b[31mError: \u001b[0m\u001b[0m\u001b[1mUnsupported argument\u001b[0m\n\u001b[31m\u00e2\u201d\u201a\u001b[0m \u001b[0m\n\u001b[31m\u00e2\u201d\u201a\u001b[0m \u001b[0m\u001b[0m  on main.tf line 133, in resource \"aws_s3_bucket\" \"cloudtrail_bucket\":\n\u001b[31m\u00e2\u201d\u201a\u001b[0m \u001b[0m 133:   \u001b[4mblock_public_acls\u001b[0m   = true\u001b[0m\n\u001b[31m\u00e2\u201d\u201a\u001b[0m \u001b[0m\n\u001b[31m\u00e2\u201d\u201a\u001b[0m \u001b[0mAn argument named \"block_public_acls\" is not expected here.\n\u001b[31m\u00e2\u2022\u00b5\u001b[0m\u001b[0m\n\u001b[31m\u00e2\u2022\u00b7\u001b[0m\u001b[0m\n\u001b[31m\u00e2\u201d\u201a\u001b[0m \u001b[0m\u001b[1m\u001b[31mError: \u001b[0m\u001b[0m\u001b[1mUnsupported argument\u001b[0m\n\u001b[31m\u00e2\u201d\u201a\u001b[0m \u001b[0m\n\u001b[31m\u00e2\u201d\u201a\u001b[0m \u001b[0m\u001b[0m  on main.tf line 134, in resource \"aws_s3_bucket\" \"cloudtrail_bucket\":\n\u001b[31m\u00e2\u201d\u201a\u001b[0m \u001b[0m 134:   \u001b[4mblock_public_policy\u001b[0m = true\u001b[0m\n\u001b[31m\u00e2\u201d\u201a\u001b[0m \u001b[0m\n\u001b[31m\u00e2\u201d\u201a\u001b[0m \u001b[0mAn argument named \"block_public_policy\" is not expected here.\n\u001b[31m\u00e2\u2022\u00b5\u001b[0m\u001b[0m\n\u001b[31m\u00e2\u2022\u00b7\u001b[0m\u001b[0m\n\u001b[31m\u00e2\u201d\u201a\u001b[0m \u001b[0m\u001b[1m\u001b[31mError: \u001b[0m\u001b[0m\u001b[1mUnsupported argument\u001b[0m\n\u001b[31m\u00e2\u201d\u201a\u001b[0m \u001b[0m\n\u001b[31m\u00e2\u201d\u201a\u001b[0m \u001b[0m\u001b[0m  on main.tf line 135, in resource \"aws_s3_bucket\" \"cloudtrail_bucket\":\n\u001b[31m\u00e2\u201d\u201a\u001b[0m \u001b[0m 135:   \u001b[4mignore_public_acls\u001b[0m  = true\u001b[0m\n\u001b[31m\u00e2\u201d\u201a\u001b[0m \u001b[0m\n\u001b[31m\u00e2\u201d\u201a\u001b[0m \u001b[0mAn argument named \"ignore_public_acls\" is not expected here.\n\u001b[31m\u00e2\u2022\u00b5\u001b[0m\u001b[0m\n\u001b[31m\u00e2\u2022\u00b7\u001b[0m\u001b[0m\n\u001b[31m\u00e2\u201d\u201a\u001b[0m \u001b[0m\u001b[1m\u001b[31mError: \u001b[0m\u001b[0m\u001b[1mUnsupported argument\u001b[0m\n\u001b[31m\u00e2\u201d\u201a\u001b[0m \u001b[0m\n\u001b[31m\u00e2\u201d\u201a\u001b[0m \u001b[0m\u001b[0m  on main.tf line 136, in resource \"aws_s3_bucket\" \"cloudtrail_bucket\":\n\u001b[31m\u00e2\u201d\u201a\u001b[0m \u001b[0m 136:   \u001b[4mrestrict_public_buckets\u001b[0m = true\u001b[0m\n\u001b[31m\u00e2\u201d\u201a\u001b[0m \u001b[0m\n\u001b[31m\u00e2\u201d\u201a\u001b[0m \u001b[0mAn argument named \"restrict_public_buckets\" is not expected here.\n\u001b[31m\u00e2\u2022\u00b5\u001b[0m\u001b[0m\n"
      ]
    },
    "compliance_report": null,
    "checkov_output_file": null,
    "errors": [
      "Formatting error: Code is not properly formatted",
      "Validation error: \u001b[31m\u00e2\u2022\u00b7\u001b[0m\u001b[0m\n\u001b[31m\u00e2\u201d\u201a\u001b[0m \u001b[0m\u001b[1m\u001b[31mError: \u001b[0m\u001b[0m\u001b[1mUnsupported argument\u001b[0m\n\u001b[31m\u00e2\u201d\u201a\u001b[0m \u001b[0m\n\u001b[31m\u00e2\u201d\u201a\u001b[0m \u001b[0m\u001b[0m  on main.tf line 133, in resource \"aws_s3_bucket\" \"cloudtrail_bucket\":\n\u001b[31m\u00e2\u201d\u201a\u001b[0m \u001b[0m 133:   \u001b[4mblock_public_acls\u001b[0m   = true\u001b[0m\n\u001b[31m\u00e2\u201d\u201a\u001b[0m \u001b[0m\n\u001b[31m\u00e2\u201d\u201a\u001b[0m \u001b[0mAn argument named \"block_public_acls\" is not expected here.\n\u001b[31m\u00e2\u2022\u00b5\u001b[0m\u001b[0m\n\u001b[31m\u00e2\u2022\u00b7\u001b[0m\u001b[0m\n\u001b[31m\u00e2\u201d\u201a\u001b[0m \u001b[0m\u001b[1m\u001b[31mError: \u001b[0m\u001b[0m\u001b[1mUnsupported argument\u001b[0m\n\u001b[31m\u00e2\u201d\u201a\u001b[0m \u001b[0m\n\u001b[31m\u00e2\u201d\u201a\u001b[0m \u001b[0m\u001b[0m  on main.tf line 134, in resource \"aws_s3_bucket\" \"cloudtrail_bucket\":\n\u001b[31m\u00e2\u201d\u201a\u001b[0m \u001b[0m 134:   \u001b[4mblock_public_policy\u001b[0m = true\u001b[0m\n\u001b[31m\u00e2\u201d\u201a\u001b[0m \u001b[0m\n\u001b[31m\u00e2\u201d\u201a\u001b[0m \u001b[0mAn argument named \"block_public_policy\" is not expected here.\n\u001b[31m\u00e2\u2022\u00b5\u001b[0m\u001b[0m\n\u001b[31m\u00e2\u2022\u00b7\u001b[0m\u001b[0m\n\u001b[31m\u00e2\u201d\u201a\u001b[0m \u001b[0m\u001b[1m\u001b[31mError: \u001b[0m\u001b[0m\u001b[1mUnsupported argument\u001b[0m\n\u001b[31m\u00e2\u201d\u201a\u001b[0m \u001b[0m\n\u001b[31m\u00e2\u201d\u201a\u001b[0m \u001b[0m\u001b[0m  on main.tf line 135, in resource \"aws_s3_bucket\" \"cloudtrail_bucket\":\n\u001b[31m\u00e2\u201d\u201a\u001b[0m \u001b[0m 135:   \u001b[4mignore_public_acls\u001b[0m  = true\u001b[0m\n\u001b[31m\u00e2\u201d\u201a\u001b[0m \u001b[0m\n\u001b[31m\u00e2\u201d\u201a\u001b[0m \u001b[0mAn argument named \"ignore_public_acls\" is not expected here.\n\u001b[31m\u00e2\u2022\u00b5\u001b[0m\u001b[0m\n\u001b[31m\u00e2\u2022\u00b7\u001b[0m\u001b[0m\n\u001b[31m\u00e2\u201d\u201a\u001b[0m \u001b[0m\u001b[1m\u001b[31mError: \u001b[0m\u001b[0m\u001b[1mUnsupported argument\u001b[0m\n\u001b[31m\u00e2\u201d\u201a\u001b[0m \u001b[0m\n\u001b[31m\u00e2\u201d\u201a\u001b[0m \u001b[0m\u001b[0m  on main.tf line 136, in resource \"aws_s3_bucket\" \"cloudtrail_bucket\":\n\u001b[31m\u00e2\u201d\u201a\u001b[0m \u001b[0m 136:   \u001b[4mrestrict_public_buckets\u001b[0m = true\u001b[0m\n\u001b[31m\u00e2\u201d\u201a\u001b[0m \u001b[0m\n\u001b[31m\u00e2\u201d\u201a\u001b[0m \u001b[0mAn argument named \"restrict_public_buckets\" is not expected here.\n\u001b[31m\u00e2\u2022\u00b5\u001b[0m\u001b[0m\n"
    ]
  },
  {
    "query": "Configure secure VPC with private subnets and security groups according to CIS benchmarks",
    "terraform_code": "```hcl\nprovider \"aws\" {\n  region = \"us-west-2\"\n}\n\n# VPC\nresource \"aws_vpc\" \"main\" {\n  cidr_block           = \"10.0.0.0/16\"\n  enable_dns_support   = true\n  enable_dns_hostnames = true\n\n  tags = {\n    Name = \"main-vpc\"\n  }\n}\n\n# Private Subnets\nresource \"aws_subnet\" \"private\" {\n  count = 2\n\n  vpc_id            = aws_vpc.main.id\n  cidr_block        = \"10.0.${count.index}.0/24\"\n  availability_zone = element(data.aws_availability_zones.available.names, count.index)\n\n  tags = {\n    Name = \"private-subnet-${count.index}\"\n  }\n}\n\n# Internet Gateway\nresource \"aws_internet_gateway\" \"main\" {\n  vpc_id = aws_vpc.main.id\n\n  tags = {\n    Name = \"main-igw\"\n  }\n}\n\n# Route Table\nresource \"aws_route_table\" \"private\" {\n  count = 2\n\n  vpc_id = aws_vpc.main.id\n\n  tags = {\n    Name = \"private-route-table-${count.index}\"\n  }\n}\n\n# Route Table Association\nresource \"aws_route_table_association\" \"private\" {\n  count = 2\n\n  subnet_id      = aws_subnet.private[count.index].id\n  route_table_id = aws_route_table.private[count.index].id\n}\n\n# Security Group\nresource \"aws_security_group\" \"private\" {\n  name        = \"private-sg\"\n  description = \"Security group for private instances\"\n  vpc_id      = aws_vpc.main.id\n\n  ingress {\n    from_port   = 22\n    to_port     = 22\n    protocol    = \"tcp\"\n    cidr_blocks = [\"10.0.0.0/16\"]\n  }\n\n  egress {\n    from_port   = 0\n    to_port     = 0\n    protocol    = \"-1\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n\n  tags = {\n    Name = \"private-sg\"\n  }\n}\n\n# VPC Flow Logs\nresource \"aws_flow_log\" \"vpc_flow_log\" {\n  log_destination      = aws_cloudwatch_log_group.flow_log_group.arn\n  log_destination_type = \"cloud-watch-logs\"\n  traffic_type         = \"ALL\"\n  vpc_id               = aws_vpc.main.id\n\n  tags = {\n    Name = \"vpc-flow-log\"\n  }\n}\n\nresource \"aws_cloudwatch_log_group\" \"flow_log_group\" {\n  name              = \"/aws/vpc/flow-logs\"\n  retention_in_days = 30\n\n  tags = {\n    Name = \"vpc-flow-log-group\"\n  }\n}\n\n# IAM Role for EC2\nresource \"aws_iam_role\" \"ec2_role\" {\n  name = \"ec2-role\"\n\n  assume_role_policy = jsonencode({\n    Version = \"2012-10-17\"\n    Statement = [\n      {\n        Action = \"sts:AssumeRole\"\n        Effect = \"Allow\"\n        Principal = {\n          Service = \"ec2.amazonaws.com\"\n        }\n      },\n    ]\n  })\n\n  tags = {\n    Name = \"ec2-role\"\n  }\n}\n\nresource \"aws_iam_role_policy\" \"ec2_policy\" {\n  name = \"ec2-policy\"\n  role = aws_iam_role.ec2_role.id\n\n  policy = jsonencode({\n    Version = \"2012-10-17\"\n    Statement = [\n      {\n        Effect = \"Allow\"\n        Action = [\n          \"ec2:Describe*\",\n          \"cloudwatch:PutMetricData\",\n          \"cloudwatch:GetMetricStatistics\",\n          \"cloudwatch:ListMetrics\"\n        ]\n        Resource = \"*\"\n      },\n    ]\n  })\n}\n\n# CloudTrail\nresource \"aws_cloudtrail\" \"main\" {\n  name                          = \"main-trail\"\n  s3_bucket_name                = aws_s3_bucket.cloudtrail.id\n  include_global_service_events = true\n  is_multi_region_trail        = true\n  enable_log_file_validation    = true\n  enable_logging                = true\n\n  tags = {\n    Name = \"main-trail\"\n  }\n}\n\n# S3 Bucket for CloudTrail\nresource \"aws_s3_bucket\" \"cloudtrail\" {\n  bucket = \"main-cloudtrail-bucket\"\n  acl    = \"private\"\n\n  versioning {\n    enabled = true\n  }\n\n  server_side_encryption_configuration {\n    rule {\n      apply_server_side_encryption_by_default {\n        sse_algorithm = \"AES256\"\n      }\n    }\n  }\n\n  tags = {\n    Name = \"main-cloudtrail-bucket\"\n  }\n}\n\nresource \"aws_s3_bucket_public_access_block\" \"cloudtrail\" {\n  bucket = aws_s3_bucket.cloudtrail.id\n\n  block_public_acls       = true\n  block_public_policy    = true\n  ignore_public_acls     = true\n  restrict_public_buckets = true\n}\n\n# KMS Key for S3 Bucket Encryption\nresource \"aws_kms_key\" \"s3_key\" {\n  description             = \"KMS key for S3 bucket encryption\"\n  enable_key_rotation     = true\n  deletion_window_in_days = 30\n\n  policy = jsonencode({\n    Version = \"2012-10-17\"\n    Statement = [\n      {\n        Effect = \"Allow\"\n        Principal = {\n          AWS = \"arn:aws:iam::${data.aws_caller_identity.current.account_id}:root\"\n        }\n        Action = \"kms:*\"\n        Resource = \"*\"\n      },\n    ]\n  })\n\n  tags = {\n    Name = \"s3-kms-key\"\n  }\n}\n\n# CloudWatch Alarm for Unauthorized API Calls\nresource \"aws_cloudwatch_metric_alarm\" \"unauthorized_api_calls\" {\n  alarm_name          = \"unauthorized-api-calls\"\n  comparison_operator = \"GreaterThanOrEqualToThreshold\"\n  evaluation_periods  = \"1\"\n  metric_name         = \"UnauthorizedAccessAttemptCount\"\n  namespace           = \"AWS/CloudTrail\"\n  period              = \"300\"\n  statistic           = \"Sum\"\n  threshold           = \"1\"\n  alarm_description   = \"Alarm for unauthorized API calls\"\n  alarm_actions       = [aws_sns_topic.alarm_topic.arn]\n\n  tags = {\n    Name = \"unauthorized-api-calls-alarm\"\n  }\n}\n\nresource \"aws_sns_topic\" \"alarm_topic\" {\n  name = \"alarm-topic\"\n\n  tags = {\n    Name = \"alarm-topic\"\n  }\n}\n\nresource \"aws_sns_topic_policy\" \"default\" {\n  arn = aws_sns_topic.alarm_topic.arn\n\n  policy = jsonencode({\n    Version = \"2012-10-17\"\n    Statement = [\n      {\n        Effect = \"Allow\"\n        Principal = {\n          Service = \"cloudwatch.amazonaws.com\"\n        }\n        Action = \"sns:Publish\"\n        Resource = aws_sns_topic.alarm_topic.arn\n      },\n    ]\n  })\n}\n\n# Data Source for Availability Zones\ndata \"aws_availability_zones\" \"available\" {}\n\n# Data Source for Caller Identity\ndata \"aws_caller_identity\" \"current\" {}\n```",
    "referenced_cis_controls": [],
    "validation_summary": {
      "status": "failed",
      "syntax_valid": true,
      "cis_compliant": false,
      "referenced_cis_controls": [],
      "issues": [
        "CIS compliance validation failed",
        "Formatting error: Code is not properly formatted",
        "CIS compliance check error: [Errno 13] Permission denied: 'checkov_output\\\\validation_20250325_014614_3804.json'"
      ]
    },
    "compliance_report": null,
    "checkov_output_file": null,
    "errors": [
      "Formatting error: Code is not properly formatted",
      "CIS compliance check error: [Errno 13] Permission denied: 'checkov_output\\\\validation_20250325_014614_3804.json'"
    ]
  },
  {
    "query": "Create an encrypted RDS instance with enhanced monitoring",
    "terraform_code": "```hcl\nprovider \"aws\" {\n  region = \"us-west-2\"\n}\n\nresource \"aws_vpc\" \"main\" {\n  cidr_block = \"10.0.0.0/16\"\n  enable_dns_support   = true\n  enable_dns_hostnames = true\n\n  tags = {\n    Name = \"main-vpc\"\n  }\n}\n\nresource \"aws_subnet\" \"private\" {\n  count = 2\n  vpc_id            = aws_vpc.main.id\n  cidr_block        = cidrsubnet(aws_vpc.main.cidr_block, 4, count.index)\n  availability_zone = element(data.aws_availability_zones.available.names, count.index)\n\n  tags = {\n    Name = \"private-subnet-${count.index + 1}\"\n  }\n}\n\nresource \"aws_security_group\" \"rds\" {\n  name        = \"rds-sg\"\n  description = \"Security group for RDS instance\"\n  vpc_id      = aws_vpc.main.id\n\n  ingress {\n    from_port   = 3306\n    to_port     = 3306\n    protocol    = \"tcp\"\n    cidr_blocks = [\"10.0.0.0/16\"]\n  }\n\n  egress {\n    from_port   = 0\n    to_port     = 0\n    protocol    = \"-1\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n\n  tags = {\n    Name = \"rds-sg\"\n  }\n}\n\nresource \"aws_db_subnet_group\" \"main\" {\n  name       = \"main-db-subnet-group\"\n  subnet_ids = aws_subnet.private[*].id\n\n  tags = {\n    Name = \"main-db-subnet-group\"\n  }\n}\n\nresource \"aws_kms_key\" \"rds\" {\n  description             = \"KMS key for RDS\"\n  enable_key_rotation     = true\n  deletion_window_in_days = 30\n\n  policy = jsonencode({\n    Version = \"2012-10-17\"\n    Statement = [\n      {\n        Sid = \"Enable IAM User Permissions\"\n        Effect = \"Allow\"\n        Principal = {\n          AWS = \"arn:aws:iam::${data.aws_caller_identity.current.account_id}:root\"\n        }\n        Action = \"kms:*\"\n        Resource = \"*\"\n      },\n      {\n        Sid = \"Allow access for Key Administrators\"\n        Effect = \"Allow\"\n        Principal = {\n          AWS = \"arn:aws:iam::${data.aws_caller_identity.current.account_id}:role/admin\"\n        }\n        Action = [\n          \"kms:Create*\",\n          \"kms:Describe*\",\n          \"kms:Enable*\",\n          \"kms:List*\",\n          \"kms:Put*\",\n          \"kms:Update*\",\n          \"kms:Revoke*\",\n          \"kms:Disable*\",\n          \"kms:Get*\",\n          \"kms:Delete*\",\n          \"kms:TagResource\",\n          \"kms:UntagResource\",\n          \"kms:ScheduleKeyDeletion\",\n          \"kms:CancelKeyDeletion\"\n        ]\n        Resource = \"*\"\n      },\n      {\n        Sid = \"Allow use of the key\"\n        Effect = \"Allow\"\n        Principal = {\n          AWS = \"arn:aws:iam::${data.aws_caller_identity.current.account_id}:role/rds\"\n        }\n        Action = [\n          \"kms:Encrypt\",\n          \"kms:Decrypt\",\n          \"kms:ReEncrypt*\",\n          \"kms:GenerateDataKey*\",\n          \"kms:DescribeKey\"\n        ]\n        Resource = \"*\"\n      }\n    ]\n  })\n\n  tags = {\n    Name = \"rds-kms-key\"\n  }\n}\n\nresource \"aws_db_parameter_group\" \"main\" {\n  name   = \"main-db-parameter-group\"\n  family = \"mysql8.0\"\n\n  parameter {\n    name  = \"binlog_format\"\n    value = \"ROW\"\n  }\n\n  parameter {\n    name  = \"general_log\"\n    value = \"1\"\n  }\n\n  parameter {\n    name  = \"slow_query_log\"\n    value = \"1\"\n  }\n\n  parameter {\n    name  = \"long_query_time\"\n    value = \"1.0\"\n  }\n\n  tags = {\n    Name = \"main-db-parameter-group\"\n  }\n}\n\nresource \"aws_db_instance\" \"main\" {\n  identifier             = \"main-db\"\n  engine                 = \"mysql\"\n  engine_version         = \"8.0\"\n  instance_class         = \"db.t3.micro\"\n  allocated_storage      = 20\n  storage_type           = \"gp2\"\n  storage_encrypted      = true\n  kms_key_id             = aws_kms_key.rds.arn\n  db_name                = \"mydb\"\n  username               = \"admin\"\n  password                = \"YourPassword123!\"\n  parameter_group_name   = aws_db_parameter_group.main.name\n  db_subnet_group_name   = aws_db_subnet_group.main.name\n  vpc_security_group_ids = [aws_security_group.rds.id]\n  multi_az               = true\n  skip_final_snapshot    = true\n  apply_immediately      = true\n  monitoring_interval    = 60\n  monitoring_role_arn    = aws_iam_role.rds_monitoring.arn\n\n  tags = {\n    Name = \"main-db\"\n  }\n}\n\nresource \"aws_iam_role\" \"rds_monitoring\" {\n  name = \"rds-monitoring-role\"\n\n  assume_role_policy = jsonencode({\n    Version = \"2012-10-17\"\n    Statement = [\n      {\n        Effect = \"Allow\"\n        Principal = {\n          Service = \"monitoring.rds.amazonaws.com\"\n        }\n        Action = \"sts:AssumeRole\"\n      }\n    ]\n  })\n\n  tags = {\n    Name = \"rds-monitoring-role\"\n  }\n}\n\nresource \"aws_iam_role_policy_attachment\" \"rds_monitoring\" {\n  role       = aws_iam_role.rds_monitoring.name\n  policy_arn = \"arn:aws:iam::aws:policy/service-role/AmazonRDSEnhancedMonitoringRole\"\n}\n\nresource \"aws_cloudtrail\" \"main\" {\n  name                          = \"main-cloudtrail\"\n  s3_bucket_name                = aws_s3_bucket.cloudtrail.id\n  include_global_service_events = true\n  is_multi_region_trail         = true\n  enable_log_file_validation    = true\n\n  event_selector {\n    read_write_type           = \"All\"\n    include_management_events = true\n  }\n\n  tags = {\n    Name = \"main-cloudtrail\"\n  }\n}\n\nresource \"aws_s3_bucket\" \"cloudtrail\" {\n  bucket = \"main-cloudtrail-logs\"\n  acl    = \"private\"\n\n  versioning {\n    enabled = true\n  }\n\n  server_side_encryption_configuration {\n    rule {\n      apply_server_side_encryption_by_default {\n        sse_algorithm = \"AES256\"\n      }\n    }\n  }\n\n  tags = {\n    Name = \"main-cloudtrail-logs\"\n  }\n}\n\nresource \"aws_s3_bucket_public_access_block\" \"cloudtrail\" {\n  bucket = aws_s3_bucket.cloudtrail.id\n\n  block_public_acls   = true\n  block_public_policy = true\n  ignore_public_acls  = true\n  restrict_public_buckets = true\n}\n\nresource \"aws_cloudwatch_log_group\" \"rds\" {\n  name              = \"/aws/rds/instance/main-db/general\"\n  retention_in_days = 30\n\n  tags = {\n    Name = \"rds-log-group\"\n  }\n}\n\nresource \"aws_cloudwatch_metric_alarm\" \"cpu_utilization\" {\n  alarm_name          = \"rds-cpu-utilization\"\n  comparison_operator = \"GreaterThanOrEqualToThreshold\"\n  evaluation_periods  = \"2\"\n  metric_name         = \"CPUUtilization\"\n  namespace           = \"AWS/RDS\"\n  period              = \"60\"\n  statistic           = \"Average\"\n  threshold           = \"80\"\n  alarm_description   = \"RDS CPU utilization is over 80%\"\n  alarm_actions       = [aws_sns_topic.alarms.arn]\n  ok_actions          = [aws_sns_topic.alarms.arn]\n\n  dimensions = {\n    DBInstanceIdentifier = aws_db_instance.main.id\n  }\n\n  tags = {\n    Name = \"rds-cpu-utilization-alarm\"\n  }\n}\n\nresource \"aws_sns_topic\" \"alarms\" {\n  name = \"rds-alarms-topic\"\n\n  tags = {\n    Name = \"rds-alarms-topic\"\n  }\n}\n\nresource \"aws_sns_topic_policy\" \"default\" {\n  arn    = aws_sns_topic.alarms.arn\n  policy = data.aws_iam_policy_document.sns_topic_policy.json\n}\n\ndata \"aws_iam_policy_document\" \"sns_topic_policy\" {\n  statement {\n    actions = [\n      \"SNS:Subscribe\",\n      \"SNS:SetTopicAttributes\",\n      \"SNS:RemovePermission\",\n      \"SNS:Receive\",\n      \"SNS:Publish\",\n      \"SNS:ListSubscriptionsByTopic\",\n      \"SNS:GetTopicAttributes\",\n      \"SNS:DeleteTopic\",\n      \"SNS:AddPermission\",\n    ]\n\n    condition {\n      test     = \"StringEquals\"\n      variable = \"AWS:SourceOwner\"\n\n      values = [\n        data.aws_caller_identity.current.account_id,\n      ]\n    }\n\n    effect = \"Allow\"\n\n    principals {\n      type        = \"AWS\"\n      identifiers = [\"*\"]\n    }\n\n    resources = [\n      aws_sns_topic.alarms.arn,\n    ]\n\n    sid = \"AllowSnsTopicSubscription\"\n  }\n}\n\ndata \"aws_availability_zones\" \"available\" {}\n\ndata \"aws_caller_identity\" \"current\" {}\n```",
    "referenced_cis_controls": [],
    "validation_summary": {
      "status": "failed",
      "syntax_valid": true,
      "cis_compliant": false,
      "referenced_cis_controls": [],
      "issues": [
        "CIS compliance validation failed",
        "Formatting error: Code is not properly formatted",
        "CIS compliance check error: [Errno 13] Permission denied: 'checkov_output\\\\validation_20250325_014757_7395.json'"
      ]
    },
    "compliance_report": null,
    "checkov_output_file": null,
    "errors": [
      "Formatting error: Code is not properly formatted",
      "CIS compliance check error: [Errno 13] Permission denied: 'checkov_output\\\\validation_20250325_014757_7395.json'"
    ]
  }
]