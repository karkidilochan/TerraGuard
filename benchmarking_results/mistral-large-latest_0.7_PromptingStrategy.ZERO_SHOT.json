[
    {
        "Prompt ID": 1,
        "Resource": "aws_cloudwatch_log_group, aws_cloudwatch_log_resource_policy, aws_route53_query_log, aws_route53_zone, aws_iam_policy_document",
        "Prompt": "Configure a query log that can create a log stream and put log events using Route 53 resources. Name the zone \"primary\", the cloudwatch log group \"aws_route53_example_com\", and the cloudwatch log resource policy \"route53-query-logging-policy\"",
        "Rego Intent": "package terraform.validation\n\ndefault is_configuration_valid = false\n\ndefault is_valid_r53_zone = false\n\ndefault is_valid_cloudwatch_log_group = false\n\ndefault is_valid_cloudwatch_log_resource_policy = false\n\ndefault is_valid_route53_query_log = false\n\n# Validate aws_route53_zone resource\nis_valid_r53_zone {\n    some i\n    resource := input.configuration.root_module.resources[i]\n    resource.type == \"aws_route53_zone\"\n    resource.expressions.name\n}\n\nis_valid_cloudwatch_log_group {\n    some i\n    resource := input.configuration.root_module.resources[i]\n    resource.type == \"aws_cloudwatch_log_group\"\n}\n\nis_valid_cloudwatch_log_resource_policy {\n    some i\n    resource := input.resource_changes[i]\n    resource.type == \"aws_cloudwatch_log_resource_policy\"\n    contains(resource.change.after.policy_document, \"logs:PutLogEvents\")\n    contains(resource.change.after.policy_document, \"logs:CreateLogStream\")\n    resource.change.after.policy_name\n}\n\nis_valid_route53_query_log {\n    some i\n    resource := input.configuration.root_module.resources[i]\n    resource.type == \"aws_route53_query_log\"\n    resource.expressions.zone_id.references[0] == \"aws_route53_zone.primary.zone_id\"\n    resource.expressions.cloudwatch_log_group_arn.references[0] == \"aws_cloudwatch_log_group.aws_route53_example_com.arn\"\n    resource.depends_on[0] == \"aws_cloudwatch_log_resource_policy.route53-query-logging-policy\"\n}\n\n# Combine all checks into a final rule\nis_configuration_valid {\n    is_valid_r53_zone\n    is_valid_cloudwatch_log_group\n    is_valid_cloudwatch_log_resource_policy\n    is_valid_route53_query_log\n}",
        "Difficulty": 5,
        "Reference Output": "terraform {\n  required_providers {\n    aws = {\n      source  = \"hashicorp/aws\"\n      version = \"~> 5.75\"\n    }\n  }\n\n  required_version = \"~> 1.9.8\"\n}\n\nprovider \"aws\" {\n  region  = \"us-east-1\"\n  profile = \"admin-1\"\n\n  assume_role {\n    role_arn = \"arn:aws:iam::590184057477:role/yicun-iac\"\n  }\n}\n\n\nresource \"aws_route53_zone\" \"primary\" {\n  name = \"example53.com\"\n}\n\nresource \"aws_cloudwatch_log_group\" \"aws_route53_example_com\" {\n  name              = \"/aws/route53/${aws_route53_zone.primary.name}\"\n  retention_in_days = 30\n}\n\n# Example CloudWatch log resource policy to allow Route53 to write logs\n# to any log group under /aws/route53/*\n\ndata \"aws_iam_policy_document\" \"route53-query-logging-policy\" {\n  statement {\n    actions = [\n      \"logs:CreateLogStream\",\n      \"logs:PutLogEvents\",\n    ]\n\n    resources = [\"arn:aws:logs:*:*:log-group:/aws/route53/*\"]\n\n    principals {\n      identifiers = [\"route53.amazonaws.com\"]\n      type        = \"Service\"\n    }\n  }\n}\n\nresource \"aws_cloudwatch_log_resource_policy\" \"route53-query-logging-policy\" {\n  policy_document = data.aws_iam_policy_document.route53-query-logging-policy.json\n  policy_name     = \"route53-query-logging-policy\"\n}\n\nresource \"aws_route53_query_log\" \"example_com\" {\n  depends_on = [aws_cloudwatch_log_resource_policy.route53-query-logging-policy]\n\n  cloudwatch_log_group_arn = aws_cloudwatch_log_group.aws_route53_example_com.arn\n  zone_id                  = aws_route53_zone.primary.zone_id\n}",
        "Intent": "Has one \"aws_route53_zone\" resource\n    with \"name\"\n\nHas one \"aws_cloudwatch_log_group\" resource\n\nHas one \"aws_cloudwatch_log_resource_policy\" resource\n    with \"policy_document\" enabling \"logs:CreateLogStream\" and \"logs:PutLogEvents\"\n    with \"policy_name\"\n\nHas one \"aws_route53_query_log\" resource\n    with \"cloudwatch_log_group_arn\" referencing the \"aws_cloudwatch_log_group\" resource\n    with \"zone_id\" referencing the \"aws_route53_zone\" resource\n    and depends on the \"aws_cloudwatch_log_resource_policy\" resource",
        "Generated Code": "```hcl\nprovider \"aws\" {\n  region  = \"us-east-1\" # Example region\n}\n\nresource \"aws_s3_bucket\" \"s3_bucket_with_versioning_and_encryption\" {\n  bucket = \"my-secure-bucket\"\n}\n\nresource \"aws_s3_bucket_versioning\" \"s3_bucket_versioning\" {\n  bucket = aws_s3_bucket.s3_bucket_with_versioning_and_encryption.id\n  versioning_configuration {\n    status = \"Enabled\"\n  }\n}\n\nresource \"aws_s3_bucket_server_side_encryption_configuration\" \"s3_bucket_encryption\" {\n  bucket = aws_s3_bucket.s3_bucket_with_versioning_and_encryption.bucket\n  rule {\n    apply_server_side_encryption_by_default {\n      sse_algorithm = \"AES256\"\n    }\n  }\n}\n\nresource \"aws_s3_bucket_public_access_block\" \"s3_bucket_public_access_block\" {\n  bucket = aws_s3_bucket.s3_bucket_with_versioning_and_encryption.id\n  block_public_acls       = true\n  block_public_policy     = true\n  ignore_public_acls      = true\n  restrict_public_buckets = true\n}\n\nresource \"aws_kms_key\" \"s3_bucket_kms_key\" {\n  description             = \"KMS key for S3 bucket encryption\"\n  deletion_window_in_days = 30\n  enable_key_rotation     = true\n  policy                  = jsonencode({\n    Version = \"2012-10-17\"\n    Id      = \"key-consolepolicy-3\"\n    Statement = [\n      {\n        Sid       = \"Enable IAM User Permissions\"\n        Effect    = \"Allow\"\n        Principal = {\n          AWS = \"arn:aws:iam::${data.aws_caller_identity.current.account_id}:root\"\n        }\n        Action    = \"kms:*\"\n        Resource  = \"*\"\n      },\n      {\n        Sid       = \"Allow access for Key Administrators\"\n        Effect    = \"Allow\"\n        Principal = {\n          AWS = \"arn:aws:iam::${data.aws_caller_identity.current.account_id}:role/admin\"\n        }\n        Action    = [\n          \"kms:Create*\",\n          \"kms:Describe*\",\n          \"kms:Enable*\",\n          \"kms:List*\",\n          \"kms:Put*\",\n          \"kms:Update*\",\n          \"kms:Revoke*\",\n          \"kms:Disable*\",\n          \"kms:Get*\",\n          \"kms:Delete*\",\n          \"kms:TagResource\",\n          \"kms:UntagResource\",\n          \"kms:ScheduleKeyDeletion\",\n          \"kms:CancelKeyDeletion\"\n        ]\n        Resource  = \"*\"\n      },\n      {\n        Sid       = \"Allow use of the key\"\n        Effect    = \"Allow\"\n        Principal = {\n          AWS = \"arn:aws:iam::${data.aws_caller_identity.current.account_id}:role/user\"\n        }\n        Action    = [\n          \"kms:Encrypt\",\n          \"kms:Decrypt\",\n          \"kms:ReEncrypt*\",\n          \"kms:GenerateDataKey*\",\n          \"kms:DescribeKey\"\n        ]\n        Resource  = \"*\"\n      },\n      {\n        Sid       = \"Allow attachment of persistent resources\"\n        Effect    = \"Allow\"\n        Principal = {\n          AWS = \"arn:aws:iam::${data.aws_caller_identity.current.account_id}:role/user\"\n        }\n        Action    = [\n          \"kms:CreateGrant\",\n          \"kms:ListGrants\",\n          \"kms:RevokeGrant\"\n        ]\n        Resource  = \"*\"\n        Condition = {\n          Bool = {\n            \"kms:GrantIsForAWSResource\" = \"true\"\n          }\n        }\n      }\n    ]\n  })\n}\n\nresource \"aws_route53_zone\" \"primary\" {\n  name = \"example.com\"\n}\n\nresource \"aws_route53_query_log\" \"route53_query_log\" {\n  cloudwatch_log_group_arn = aws_cloudwatch_log_group.route53_query_log_group.arn\n  zone_id                  = aws_route53_zone.primary.zone_id\n}\n\nresource \"aws_cloudwatch_log_group\" \"route53_query_log_group\" {\n  name              = \"aws_route53_example_com\"\n  retention_in_days = 30\n}\n\nresource \"aws_cloudwatch_log_resource_policy\" \"route53_query_log_policy\" {\n  policy_name     = \"route53-query-logging-policy\"\n  policy_document = jsonencode({\n    Version = \"2012-10-17\"\n    Statement = [\n      {\n        Effect   = \"Allow\"\n        Principal = {\n          Service = \"route53.amazonaws.com\"\n        }\n        Action   = \"logs:PutLogEvents\"\n        Resource = \"arn:aws:logs:${data.aws_region.current.name}:${data.aws_caller_identity.current.account_id}:log-group:${aws_cloudwatch_log_group.route53_query_log_group.name}:*\"\n      },\n      {\n        Effect   = \"Allow\"\n        Principal = {\n          Service = \"route53.amazonaws.com\"\n        }\n        Action   = \"logs:CreateLogStream\"\n        Resource = \"arn:aws:logs:${data.aws_region.current.name}:${data.aws_caller_identity.current.account_id}:log-group:${aws_cloudwatch_log_group.route53_query_log_group.name}:*\"\n      }\n    ]\n  })\n}\n\ndata \"aws_caller_identity\" \"current\" {}\ndata \"aws_region\" \"current\" {}\n```",
        "Validation Summary": {
            "status": "failed",
            "syntax_valid": true,
            "cis_compliant": false,
            "referenced_cis_controls": [
                "2.2",
                "1.5",
                "1.10",
                "2.1.2",
                "2.1.1"
            ],
            "issues": [
                "CIS compliance validation failed"
            ],
            "checkov_output_file": "checkov_output/validation_20250415_195420_1480_20250415_195448.json"
        },
        "Compliance Report": "# CIS Compliance Report\n\n## Summary\n- Pass Rate: 68.0%\n- Total Checks: 25\n- Passed: 17\n- Failed: 8\n- Skipped: 0\n\n## CIS Controls Referenced\n- CIS 1.10\n- CIS 1.5\n- CIS 2.1.1\n- CIS 2.1.2\n- CIS 2.2\n\n## Failed Checks\n- CKV_AWS_158: Ensure that CloudWatch Log Group is encrypted by KMS ()\n  - Resource: aws_cloudwatch_log_group.route53_query_log_group\n  - Guideline: https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/ensure-that-cloudwatch-log-group-is-encrypted-by-kms\n- CKV_AWS_338: Ensure CloudWatch log groups retains logs for at least 1 year ()\n  - Resource: aws_cloudwatch_log_group.route53_query_log_group\n  - Guideline: https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-logging-policies/bc-aws-338\n- CKV2_AWS_62: Ensure S3 buckets should have event notifications enabled ()\n  - Resource: aws_s3_bucket.s3_bucket_with_versioning_and_encryption\n  - Guideline: https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-logging-policies/bc-aws-2-62\n- CKV_AWS_144: Ensure that S3 bucket has cross-region replication enabled ()\n  - Resource: aws_s3_bucket.s3_bucket_with_versioning_and_encryption\n  - Guideline: https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/ensure-that-s3-bucket-has-cross-region-replication-enabled\n- CKV2_AWS_38: Ensure Domain Name System Security Extensions (DNSSEC) signing is enabled for Amazon Route 53 public hosted zones ()\n  - Resource: aws_route53_zone.primary\n  - Guideline: https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-networking-policies/bc-aws-2-38\n- CKV2_AWS_61: Ensure that an S3 bucket has a lifecycle configuration ()\n  - Resource: aws_s3_bucket.s3_bucket_with_versioning_and_encryption\n  - Guideline: https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-logging-policies/bc-aws-2-61\n- CKV_AWS_18: Ensure the S3 bucket has access logging enabled ()\n  - Resource: aws_s3_bucket.s3_bucket_with_versioning_and_encryption\n  - Guideline: https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/s3-policies/s3-13-enable-logging\n- CKV_AWS_145: Ensure that S3 buckets are encrypted with KMS by default ()\n  - Resource: aws_s3_bucket.s3_bucket_with_versioning_and_encryption\n  - Guideline: https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/ensure-that-s3-buckets-are-encrypted-with-kms-by-default",
        "Timestamp": "2025-04-16T01:54:54.083560",
        "Strategy": "zero_shot"
    }
]